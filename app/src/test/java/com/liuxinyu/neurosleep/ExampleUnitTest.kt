package com.liuxinyu.neurosleep

import com.liuxinyu.neurosleep.core.ble.ByteUtil
import com.liuxinyu.neurosleep.feature.home.EcgProcessor
import org.junit.Test

import org.junit.Assert.*
import java.util.Locale

/**
 * Example local unit test, which will execute on the development machine (host).
 * See [testing documentation](http://d.android.com/tools/testing).
 * 对于数据处理的步骤，注意单元测试的重要性
 */
class ExampleUnitTest {
    @Test
    fun addition_isCorrect() {
        assertEquals(4, 2 + 2)
    }

    @Test
    fun testSplit() {
        val points : MutableList<Int> = mutableListOf(0,63, -106, 39, 64, -117, 106, 66, -83, 45, 0, 62, -15, -74, 64, 37, 80, 66, -124, -11, 0, 62, 7, 91, 63, 72, 106, 66, 103, 22, 0, 62, -78, 6, 63, -51, 0, 66, -124, 10, 0, 63, -111, -81, 64, -119, -38, 66, -108, -29, 0, 62, -15, -65, 64, 41, 21, 66, 97, 20, 0, 62, 3, -7, 63, 71, -14, 66, 52, 19, 0, 62, -83, 88, 63, -54, 39, 66, 82, -17)
        // println(points.windowed(10,10))
        val res = ByteUtil.parseEcgPoint(byteArrayOf(0x00,0x3F,
            0x9A.toByte(),0x27,0x40, 0x8B.toByte(),0x6A,0x42,
            0xA5.toByte(),0x2D))
        println(res)
    }

    @Test
    fun test() {
        val tips = "Don't repeat yourself"
        tips.apply {
            println(this)
        }
        tips.run {
            println(this)
        }
    }

    @Test
    fun testEcgReceived() {
        println(String.format(Locale.CHINA,"%.2f",1.22343021))
        val data = listOf(
            4194260, 4194265, 4194260, 4194267, 4194267, 4194265, 4194267, 4194268, 4194270, 4194271,4194273, 4194264, 4194258, 4194254, 4194261, 4194269, 4194275, 4194271, 4194259, 4194257, 4194260, 4194262, 4194266, 4194264, 4194267, 4194258, 4194262, 4194256, 4194254, 4194258, 4194266, 4194263, 4194264, 4194262, 4194258, 4194260, 4194263, 4194264, 4194269,4194252, 4194247, 4194254, 4194263, 4194267, 4194266, 4194256, 4194252, 4194255, 4194268, 4194270, 4194270, 4194267, 4194258, 4194261, 4194262, 4194259, 4194259, 4194263,4194267, 4194266, 4194259, 4194255, 4194263, 4194272, 4194274, 4194273, 4194273, 4194271, 4194270, 4194266, 4194269, 4194266, 4194267, 4194261, 4194264, 4194263, 4194259, 4194265, 4194263, 4194262, 4194261, 4194261, 4194271, 4194270, 4194262, 4194264, 4194267, 4194269, 4194267, 4194269, 4194259, 4194264, 4194271, 4194265, 4194267, 4194261, 4194256, 4194257, 4194260, 4194265, 4194261, 4194262, 4194261, 4194261, 4194260, 4194256, 4194263, 4194265, 4194270, 4194266, 4194258, 4194254, 4194257, 4194255, 4194258, 4194262, 4194255, 4194251, 4194262, 4194259,
            4194270, 4194260, 4194261, 4194264, 4194261, 4194269, 4194266, 4194266, 4194268, 4194259, 4194261, 4194262, 4194264, 4194262, 4194255, 4194255, 4194259, 4194267, 4194264, 4194259, 4194266, 4194270, 4194270, 4194269, 4194268, 4194263, 4194259, 4194261, 4194261, 4194263, 4194259, 4194259, 4194267, 4194267, 4194262, 4194262, 4194268, 4194263, 4194256, 4194257, 4194263, 4194265, 4194263, 4194263, 4194258, 4194265, 4194274, 4194263, 4194259, 4194258, 4194261, 4194265, 4194269, 4194269, 4194267, 4194265, 4194263, 4194267, 4194265, 4194261, 4194275, 4194273, 4194267, 4194267, 4194268, 4194262, 4194260, 4194260, 4194264, 4194264, 4194260, 4194255, 4194247, 4194252, 4194251, 4194248, 4194264, 4194266, 4194263,  4194254, 4194261, 4194267, 4194255, 4194253, 4194265, 4194261, 4194263, 4194263, 4194259, 4194255, 4194261, 4194276, 4194278, 4194270, 4194263, 4194266, 4194266, 4194263, 4194253, 4194257, 4194267, 4194255, 4194253, 4194264, 4194264, 4194270, 4194266, 4194258, 4194258, 4194266, 4194263, 4194265, 4194262, 4194264, 4194259, 4194264, 4194276, 4194273, 4194263, 4194259, 4194258, 4194265, 4194274, 4194271, 4194266, 4194271, 4194270, 4194264, 4194257, 4194260, 4194275, 4194279, 4194268, 4194265, 4194274, 4194275, 4194277, 4194268, 4194265, 4194267, 4194262, 4194263, 4194263, 4194262, 4194262, 4194261, 4194267, 4194265, 4194270, 4194270, 4194273, 4194282, 4194280, 4194277, 4194274, 4194267, 4194269, 4194274, 4194275, 4194274, 4194268, 4194271, 4194269, 4194261, 4194264, 4194271, 4194270, 4194267, 4194266, 4194268, 4194268, 4194267, 4194267, 4194263, 4194269, 4194266, 4194268, 4194271, 4194271, 4194262, 4194257, 4194257, 4194262, 4194273, 4194272, 4194265, 4194262, 4194269, 4194269, 4194262, 4194265, 4194268, 4194274, 4194276, 4194265, 4194261, 4194268, 4194269, 4194264, 4194267, 4194267, 4194267, 4194263, 4194266, 4194270, 4194268, 4194259, 4194255, 4194256, 4194256, 4194267, 4194266, 4194264, 4194267, 4194263, 4194262, 4194261, 4194263, 4194262, 4194260, 4194258, 4194259, 4194269, 4194276, 4194272, 4194269, 4194268, 4194258, 4194260, 4194271, 4194271, 4194263, 4194262, 4194258, 4194261, 4194267, 4194265, 4194268, 4194268, 4194257, 4194256, 4194264, 4194269, 4194266, 4194269, 4194267, 4194260, 4194264, 4194260, 4194263, 4194268, 4194261, 4194259, 4194267, 4194272, 4194272, 4194267, 4194259, 4194255, 4194263, 4194268, 4194262, 4194265, 4194264, 4194264, 4194266, 4194259, 4194258, 4194256, 4194265, 4194263, 4194257, 4194260, 4194262, 4194262, 4194258, 4194255, 4194254, 4194250, 4194257, 4194271, 4194277, 4194274, 4194272, 4194262, 4194258, 4194256, 4194261, 4194262, 4194254, 4194258, 4194264, 4194262, 4194259, 4194255, 4194260, 4194264, 4194264, 4194253, 4194255, 4194261, 4194262, 4194256, 4194265, 4194262, 4194257, 4194252, 4194257, 4194267, 4194265, 4194260, 4194254, 4194266, 4194266, 4194268, 4194266, 4194261, 4194261, 4194258, 4194256, 4194259, 4194268, 4194268, 4194262, 4194257, 4194257, 4194265, 4194266, 4194262, 4194260
        )
        val avg : Double = data.average()
        // kotlin 的 map 方法是有返回值的
        val res : List<Double> = data.map {
            (it - avg) / 6727.4
        }
        println(res.size)
        println(EcgProcessor.calculateHeartRate(res.toDoubleArray()))
    }

    @Test
    fun testEcgProcess() {
        // 生成数据副本
        val copy : List<Int> = listOf(
            4213264,4213232,4213232,4213264,4213232,4213200,4213216,4213216,4213168,4213104,4213088,4213088,4213056,4213024,4213040,4213040,4213024,4212992,4212960,4212944,4212944,4212960,4212976,4212992,4212960,4212928,4212928,4212896,4212880,4212880,4212896,4212864,4212816,4212800,4212816,4212800,4212768,4212768,4212768,4212784,
            4212784,4212784,4212784,4212784,4212736,4212720,4212752,4212768,4212752,4212736,4212752,4212768,4212752,4212752,4212768,4212816,4212816,4212800,4212816,4212832,4212800,4212800,4212832,4212848,4212848,4212896,4212976,4213024,4213008,4212992,4212992,4213056,4213136,4213200,4213216,4213216,4213216,4213152,4213120,4213104,
            4213024,4212976,4212976,4212992,4213008,4213008,4213024,4213040,4212992,4212960,4212944,4212912,4212880,4212832,4212768,4212768,4212960,4213488,4214544,4216112,4217696,4218880,4219024,4217584,4215232,4212928,4212096,4212160,4212448,4212848,4213104,4213216,4213216,4213184,4213200,4213248,4213280,4213312,4213328,4213376,
            4213392,4213424,4213472,4213488,4213488,4213472,4213488,4213536,4213584,4213616,4213632,4213680,4213696,4213744,4213792,4213824,4213856,4213920,4213984,4214016,4214064,4214096,4214176,4214224,4214288,4214352,4214432,4214496,4214592,4214656,4214704,4214784,4214832,4214912,4214976,4215024,4215056,4215088,4215136,4215120,
            4215056,4214976,4214896,4214784,4214640,4214464,4214336,4214192,4213984,4213792,4213664,4213552,4213456,4213376,4213312,4213264,4213216,4213152,4213136,4213168,4213168,4213152,4213152,4213168,4213136,4213136,4213168,4213184,4213168,4213152,4213152,4213184,4213184,4213184,4213200,4213216,4213216,4213184,4213200,4213184,
            4213168,4213152,4213152,4213136,4213120,4213104,4213104,4213088,4213072,4213088,4213104,4213072,4213008,4212992,4213024,4213056,4213024,4212992,4212992,4212992,4212992,4212960,4212976,4212976,4212992,4212976,4212976,4213008,4213008,4212992,4213008,4212976,4212928,4212896,4212912,4212944,4212944,4212928,4212976,4213024,
            4213024,4213024,4213040,4213056,4212976,4212672,4212512,4212576,4212672,4212720,4212784,4212816,4212832,4212832,4212864,4212896,4212896,4212896,4212896,4212912,4212912,4212912,4212928,4212944,4212928,4212944,4212976,4212992,4212992,4212992,4213008,4213008,4212992,4212992,4213024,4213088,4213104,4213072,4213104,4213152,
            4213200,4213280,4213328,4213328,4213312,4213264,4213232,4213216,4213152,4213056,4213008,4213008,4213008,4212992,4213008,4213008,4212992,4212992,4213024,4213072,4213056,4213040,4213024,4212992,4213008,4213312,4214048,4215344,4217072,4218768,4213008,4212992,4212992,4213024,4213088,4213104,4213072,4213104,4213152,4213200,
            4213280,4213328,4213328,4213312,4213264,4213232,4213216,4213152,4213056,4213008,4213008,4213008,4212992,4213008,4213008,4212992,4212992,4213024,4213072,4213056,4213040,4213024,4212992,4213008,4213312,4214048,4215344,4217072,4218768,4219904,4219680,4217840,4215136,4212960,4212416,4212528,4212896,4213248,4213408,4213456,
            4213456,4213440,4213456,4213472,4213456,4213504,4213536,4213552,4213568,4213584,4213600,4213616,4213632,4213680,4213744,4213792,4213824,4213888,4213952,4213968,4214000,4214048,4214096,4214144,4214208,4214272,4214336,4214384,4214416,4214480,4214576,4214688,4214736,4214800,4214880,4214944,4215008,4215104,4215200,4215248,
            4215280,4215344,4215424,4215472,4215536,4215616,4215648,4215680,4215744,4215760,4215728,4215648,4215536,4215408,4215216,4214992,4214816,4214704,4214592,4214432,4214336,4214304,4214288,4214256,4214240,4214240,4214240,4214240,4214224,4214224,4214272,4214256,4214240,4214272,4214272,4214304,4214336,4214368,4214384,4214368,
            4214384,4214384,4214384,4214384,4214400,4214448
        )
        val avg : Double = copy.average()
        // kotlin 的 map 方法是有返回值的
        val res : List<Double> = copy.map {
            (it - avg) / 6727.4
        }
        println(res.size)
        println(EcgProcessor.calculateHeartRate(res.toDoubleArray()))

    }

}